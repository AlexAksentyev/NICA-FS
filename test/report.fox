INCLUDE 'bin/setups/BENDS24/SEQFULL';

PROCEDURE INJECT BUNCH NUM NU PSI; {inject only the x-offset particles}
  VARIABLE X 500; VARIABLE I 1;
  VARIABLE PSI0 1;
  VARIABLE SY 1; VARIABLE SZ 1;
  PSI0 := DEG2RAD(PSI); WRITE 6 'PSI0 = '&ST(PSI0);
  SY := SIN(PSI0)*SIG(G0*NU); SZ := COS(PSI0)*SIG(G0*NU);
  WRITE 6 'INJECTING SPIN = '&FORM(0&SY&SZ);
  CR;
  X := LINSPACE(-2E-3, 2E-3, NUM);
  SR 0 0 0 0 0 0 0 0 1; SSR 0 SY SZ;
  LOOP I 1 NUM;
    IF BUNCH='X';
      SR X|I 0 0 0 0 0 0 0 1; SSR 0 SY SZ;
    ELSEIF BUNCH='Y';
      SR 0 0 X|I 0 0 0 0 0 1; SSR 0 SY SZ;
    ELSEIF TRUE;
      SR 0 0 0 0 0 (X|I)/10 0 0 1; SSR 0 SY SZ;
    ENDIF;
  ENDLOOP;
ENDPROCEDURE;

PROCEDURE INJECT_FOR_TSS;
  VARIABLE X 100; VARIABLE I 1; VARIABLE NUM 1;
  NUM := 30;
  CR;
  X := LINSPACE(-3E-3, 3E-3, NUM);
  SR 0 0 0 0 0 0 0 0 1; SSR 0 0 1;
  LOOP I 1 NUM;
    SR X|I 0 0 0 0 0 0 0 1; SSR 0 0 1;
    SR 0 0 X|I 0 0 0 0 0 1; SSR 0 0 1;
    SR 0 0 0 0 0 (X|I)/10 0 0 1; SSR 0 0 1;
  ENDLOOP;
ENDPROCEDURE;

PROCEDURE NAVIGATORS NU PSI DET KZ1 KZ2;
  VARIABLE LZ 1 2; VARIABLE PHIZ 1 2;
  VARIABLE ALPHA 1; VARIABLE PHIX 1;
  VARIABLE GAMMA 1; VARIABLE PSI0 1;
  GAMMA := CONS(1 + E0/(M0*AMUMEV));
  LZ (1) := .7; LZ(2) := .4;
  ALPHA := 0.039984488639998664; {value taken from SBEND in setups/BENDS24/FULL.fox}
  PHIX := GAMMA*G0*ALPHA;
  PSI0 := DEG2RAD(PSI); {BY DEFAULT DET='MPD'}
  WRITE 6 '+++++++ DETECTOR: '&DET;
  IF DET#'MPD'; {IF DET='SPD'}
    PSI0 := GAMMA*G0*PI-PSI0;
  ENDIF;
  PHIZ(1) := PI*NU*COS(PSI0);
  PHIZ(2) := PI*NU*SIN(PSI0)/SIN(PHIX);
  KZ1 := PHIZ(1)/LZ(1)/(1+G0);
  KZ2 := PHIZ(2)/LZ(2)/(1+G0);
ENDPROCEDURE;

PROCEDURE SPINTUNE WHERE OEID NU PSI NTURN BUNCH;
  {lattice parameters}
  VARIABLE QF  1; VARIABLE QD  1;
  VARIABLE HZ1 1; VARIABLE HZ2 1;
  VARIABLE KZ1 1; VARIABLE KZ2 1;
  VARIABLE MAPPARAMS 1 6; {HOLDS THE ABOVE VALUES}
  VARIABLE MAPARR 1000 6 472; VARIABLE SPNRARR 1000 3 3 472; {element map arrays}
  VARIABLE SEGMARR 1000 6 LENGTH(OEID)+1;
  VARIABLE SEGSARR 1000 3 3 LENGTH(OEID)+1;
  {variables required by TSS, GET_TUNE_ENSEMBLE}
  VARIABLE MU 800; VARIABLE NBAR 800 3; VARIABLE MUARR 800 4;
  {RF parameters}
  VARIABLE VRF 1 1 1;
  VARIABLE FREQ 1;
  VARIABLE HNUM 1;

  VARIABLE EL 1; {index of the current starting element}
  VARIABLE EL0 1; VARIABLE EL1 1; {select lattice segment from EL0 to EL1 for test}
  
  PROCEDURE PICK INDEX;
    VARIABLE I 1; VARIABLE J 1;
    LOOP I 1 TWOND; MSC(I) := MAPARR(I, INDEX); ENDLOOP;
    LOOP I 1 3; LOOP J 1 3; SSCR(I,J) := SPNRARR(I,J,INDEX) + 0*DD(1);
    ENDLOOP;ENDLOOP;
  ENDPROCEDURE;
  PROCEDURE MAKEMAP FROM TO START; {lattice segment FROM index TO index, beginning at START index}
    VARIABLE J 1;
    WRITE 6 '* '&ST(START);
    LMAPS START MAPARR SPNRARR; {sets the MAP, SPNR transfer maps to those of the i-th element}
    LOOP J (START+1) TO; { WRITE 6 '**       '&ST(J); }
      PICK J; LOCSET 0 0 0 0 0 0; UPDATE 1 1;
      ENDLOOP;
    LOOP J FROM (START-1); { WRITE 6 '**       '&ST(J); }
      PICK J; LOCSET 0 0 0 0 0 0; UPDATE 1 1;
      ENDLOOP;
  ENDPROCEDURE;
  PROCEDURE WST ELN OU; {used in TSS DATA OUTPUT block}
    VARIABLE I 1; VARIABLE J 1; VARIABLE STR 100;
    LOOP J 1 NRAY ; STR := SF(ELN, '(I6)')&' '&SF(J-1,'(I6)') ;
      LOOP I 1 4 ; STR := STR&SF((MUARR(I)|J),'(E15.7)') ; ENDLOOP ;
      WRITE OU STR ;
    ENDLOOP ;
  ENDPROCEDURE; { WST }
  PROCEDURE SEGMENT MAPARR SPNRARR OEID SEGMARR SEGSARR SEGNUM;
    WRITE 6 '---------- SEGMENT';
    IF (OEID|1)<0; {do NOTHING, use element-by-element tracking through MAPARR SPNRARR}
      SEGNUM := -1;
    ELSEIF LENGTH(OEID)=1; {Map consists of one segment -- the map -- injection point specified by OEID}
      IF (OEID|1)=472; VELSET OEID 1 0; ENDIF;
      WRITE 6 'MAP: '&ST(OEID|1+1)&' -- 472 --'&ST(OEID|1);
      UM; MAKEMAP 1 472 (OEID|1+1);  {this case covers OEID|1=0 }
          SMAPS 1 SEGMARR SEGSARR;
          SEGNUM := 1;
    ELSEIF LO(1); {if LENGTH(OEID)>1, injection point is SPD, and OEID specifies output points in the ORIGINAL LATTICE}
      WRITE 6 'SEG 1: 1--'&ST(OEID|1);
      UM; MAKEMAP 1 OEID|1 1;
          SMAPS 1 SEGMARR SEGSARR;
          LOOP SEGNUM 1 (LENGTH(OEID)-1);
            WRITE 6 'SEG '&ST(SEGNUM+1)&': '&ST(OEID|SEGNUM+1)&'--'&ST(OEID|(SEGNUM+1));
            UM; MAKEMAP (OEID|SEGNUM+1) OEID|(SEGNUM+1) (OEID|SEGNUM+1);
                SMAPS (SEGNUM+1) SEGMARR SEGSARR;
          ENDLOOP;
          SEGNUM := SEGNUM + 1;
          IF OEID|SEGNUM<472; WRITE 6 'LAST SEGMENT:'&ST(OEID|SEGNUM+1)&'--472';
            UM; MAKEMAP (OEID|SEGNUM+1) 472 (OEID|SEGNUM+1);
                SMAPS (SEGNUM+1) SEGMARR SEGSARR;
                SEGNUM := SEGNUM + 1;
          ENDIF;
    ENDIF;
  ENDPROCEDURE; { SEGMENT map}
  PROCEDURE TRACK CHOICE NTURN MRK;
    OPENF 99 WHERE&'PRAY:'&MRK&'.dat' 'REPLACE';
    PRAY 99; CLOSEF 99;
    OPENF 7 WHERE&'TRPRAY:'&MRK&'.dat' 'REPLACE';
    OPENF 8 WHERE&'TRPSPI:'&MRK&'.dat' 'REPLACE';
    IF CHOICE<0;
      WRITE 6 '++++++++++ ELEMENT-BY-ELEMENT TRACKING';
      TREL MAPARR SPNRARR 1 472 NTURN 7 8;
    ELSEIF CHOICE=1;
      WRITE 6 '++++++++++ UNSEGMENTED MAP, TR TRACKING';
      TRPRAY 7; TRPSPI 8;
      TR NTURN INT(NTURN/5000) -1 -3 1.2 1.2 0 0 -12;
    ELSEIF TRUE;
      WRITE 6 '++++++++++ SEGMENTED MAP, TREL TRACKING';
      TREL SEGMARR SEGSARR 1 EL NTURN 7 8;
    ENDIF;
    CLOSEF 7; CLOSEF 8;
  ENDPROCEDURE; { TRACK }


  OV 3 3 0;
  
  {setting LATTICE PARAMETERS for TSS}
  SET_FOR_PROTONS HZ1 HZ2 QF QD;
    HZ1 := SNAKE_STR(G0); HZ2 := HZ1; {NEED TO RECOMPUTE HERE B/C TSS CANNOT WORK WITH FS}

    NAVIGATORS NU PSI 'SPD' KZ1 KZ2;
    
    MAPPARAMS(1) := HZ1; MAPPARAMS(2) := HZ2;
    MAPPARAMS(3) := KZ1; MAPPARAMS(4) := KZ2;
    MAPPARAMS(5) := QF;  MAPPARAMS(6) := QD;
    LATTICE MAPPARAMS MAPARR SPNRARR; {computes element matrices}

  {SETTING RF PARAMETERS}
  HNUM := 66;
  VRF(1, 1) := 100/HNUM; {RF Voltage [kV]}
  FREQ := HNUM*REVFREQ(ACCLEN(1)); {RF Frequency}
  UM; RF VRF 0 FREQ 0 0.05;
    INSERT 1 MAPARR SPNRARR 471;

 {TSS DATA OUTPUT}
  IF TRUE; 
    EL0 := 1; EL1 := 472;
    OPENF 3618 WHERE&'MU.dat' 'REPLACE';
    WRITE 3618 'number of rays: 92 (see INJECT_FOR_TSS source code)';
    WRITE 3618 '# EID ray NU NX NY NZ';
    LOOP EL EL0 EL1;
      UM; CR;
      MAKEMAP EL0 EL1 EL; { OPENF 935 WHERE&'MAP'&MRK(EL) 'REPLACE'; PM 935; CLOSEF 935; }
      TSS MU NBAR 0;
      MUARR(1) := MU; MUARR(2) := NBAR(1); MUARR(3) := NBAR(2); MUARR(4) := NBAR(3);
      INJECT_FOR_TSS; GET_TUNE_ENSEMBLE MUARR;
      WST EL 3618;
    ENDLOOP;
    CLOSEF 3618;
  ENDIF;

  {recomputing map segments}
  SEGMENT MAPARR SPNRARR OEID SEGMARR SEGSARR EL;

  INJECT BUNCH 300 NU PSI;
  TRACK EL NTURN 'MAIN';

  {resetting for TRACKING: now can set OPTIMIZED for FS HZ1, HZ2}
  IF TRUE; {so far this hasn't worked well: simplectification error grows much faster than at lax FS}
    SET_FOR_PROTONS HZ1 HZ2 QF QD;  {***** i will use it for ONE TURN TRACKING though *****}
      MAPPARAMS(1) := HZ1; MAPPARAMS(2) := HZ2;
      LATTICE MAPPARAMS MAPARR SPNRARR; {RECOMPUTES element matrices at NEW snake field strengths}
  ENDIF;
  
  {ONE TURN TRACKING}
  INJECT BUNCH 10 NU PSI;
  TRACK -1 1 'ONE_TURN';
ENDPROCEDURE; {SPINTUNE}

PROCEDURE RUN;
  VARIABLE WHERE 100; VARIABLE COMMON 100;
  VARIABLE OEID 10; VARIABLE NTURN 1; VARIABLE BUNCH 1;
  FUNCTION DIRNAME NUM;
    VARIABLE KILOS 1; VARIABLE MILS 1;
    KILOS := NUM/1000;
    MILS := NUM/1000000;
    IF MILS<1;
      DIRNAME := MRK(KILOS)&'kTURN/';
    ELSEIF LO(1);
      DIRNAME := MRK(MILS)&'MTURN/';
      WRITE 6 '********** CHECK that tracking is done via TR'
               '           (otherwise too much data possible!)';
    ENDIF;
  ENDFUNCTION;

  OEID := 0; {output data only after these elements}
  NTURN := 30000;
  BUNCH := 'X';
  COMMON := 'data/REPORT/PROTON/LAX-FS/'&DIRNAME(NTURN)&BUNCH&'-bunch/';
  { DIRSET WHERE COMMON&'NO-NAVI/'; }
    { GROUTF 'img/dump/TR' 1; }
    { SPINTUNE WHERE OEID 0 0 NTURN BUNCH; }
  DIRSET WHERE COMMON&'SPD-0-/';
    GROUTF 'img/dump/TR' 1;
    SPINTUNE WHERE OEID 1E-2 0 NTURN BUNCH;
  DIRSET WHERE COMMON&'SPD-90-/';
    GROUTF 'img/dump/TR' 1;
    SPINTUNE WHERE OEID 1E-2 90 NTURN BUNCH;
  DIRSET WHERE COMMON&'SPD-0+/';
    GROUTF 'img/dump/TR' 1;
    SPINTUNE WHERE OEID -1E-2 0 NTURN BUNCH;
  DIRSET WHERE COMMON&'SPD-90+/';
    GROUTF 'img/dump/TR' 1;
    SPINTUNE WHERE OEID 1E-2 -90 NTURN BUNCH;
ENDPROCEDURE;
RUN; END;
